import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statistics

### GLOSSARY OF VARIABLES AND FUNCTION ARGUMENTS ###

#General##

#I : I band Apparent Magnitude 
#p : Fundamental mode Period (days)

##SMC Calibration curve##

#x : List that contains the Absolute Magnitude of SMC Delta Scuti Variables (plotted on y axis)
#y : List that contains the Fundamental Mode Period of SMC Delta Scuti Variables (plotted on x axis)
#a : gradient of line of best fit for the SMC Period Luminosity relationship calibration curve
#b : y intercept of line of best fit for the the SMC period Luminosity relationship calibration curve

##LMC Calibration curve##

#q : List that contains the Absolute Magnitude of LMC Delta Scuti Variables (plotted on y axis)
#w : List that contains the Fundamental Mode Period of LMC Delta Scuti Variables (plotted on x axis)
#c : gradient of line of best fit for the LMC Period Luminosity relationship calibration curve
#d : y intercept of line of best fit for the the LMC period Luminosity relationship calibration curve

##Results##

#medianLMCdist : median distance to LMC calculated
#medianSMCdist : median distance to SMC calculated

### distances to the Small Magellanic Cloud and Large Magellanic Cloud in parsecs ###

DistSMC = 62440
DistLMC = 49590

### imported metadata from the OGLE IV Catalogue of Delta Scuti Variables into pandaS dataframes ###

pd.options.display.max_rows = 99999

#I band LMC photometry dataframe

dfILMC = pd.read_csv ('lmcdata.csv')
dfILMC.columns =['ID', 'RA', 'Decl', 'I', 'P_1', 'dP_1', 'ID_OGLE_IV', 'REMARKS']

#I band SMC photometry dataframe

dfISMC = pd.read_csv ('smcdata.csv')
dfISMC.columns =['ID', 'RA', 'Decl', 'I', 'P_1', 'dP_1', 'ID_OGLE_IV', 'REMARKS']

### data cleaning/pre-processing ###

#apparent magnitude thresholding - based on OGLE IV telescope saturation and sensitivity limits

print(len(dfISMC))
print(len(dfILMC))

dfISMC = dfISMC[dfISMC['I'] > 13]
dfISMC = dfISMC[dfISMC['I'] < 21.5]

dfILMC = dfILMC[dfILMC['I'] > 13]
dfILMC = dfILMC[dfILMC['I'] < 21.5]

print(len(dfISMC))
print(len(dfILMC))

#removal of Milkyway Halo Delta Scutis - Equal distance approximation cannot be used with Milkyway Delta Scutis - creating new dataframes SMC: dfCSMC , LMC: dfCLMC - C represents "cleansed"

# coefficients of P-L relationship prior to cleansing - required to determine whether to remove star - the loops below take the true apparent magnitude of a star, and compare it with the apparent magnitude the star should have based on the Line of best fit
# if the star's apparent magnitude is lower than the line of best fit apparent magnitude by more than 1.5, the code keeps this star in the raw dataframe (dfISMC / dfILMC)
# if the star's apparent magnitude is greater than this thresholded value (1.5 lower than the LOBF apparent magnitude), the loop adds this star with its ID, apparent magnitude and period to a "cleansed" dataframe (dfCSMC / dfCLMC)

m = -0.5422749933150767 
n = 19.838896818945663
k = -2.3490955560897167 
l = 17.561746217049734

dfCSMC = pd.DataFrame(columns = ['ID', 'I', 'P'])
for index, row in dfISMC.iterrows():
    if np.float64(row['I']) > (np.float64(np.log10(row['P_1'])) * m + n - 1.5):
        dfCSMC.loc[len(dfCSMC.index)] = [row['ID'],row['I'],row['P_1']]
    else:
        continue

dfCLMC = pd.DataFrame(columns = ['ID', 'I', 'P'])
for index, row in dfILMC.iterrows():
    if np.float64(row['I']) > (np.float64(np.log10(row['P_1'])) * k + l - 1.5):
        dfCLMC.loc[len(dfCLMC.index)] = [row['ID'],row['I'],row['P_1']]
    else:
        continue

### SMC DISTANCE MODULUS CALCULATIONS AND DATA PROCESSING ###

#Absolute Magnitude Calculation of SMC Delta Scuti Variables

def MSMC(I): 
    return(I - 5*np.log10(DistSMC/10))

#Log(10) of the Fundamental mode Period (fundamental mode brightness fluctuation) of SMC Delta Scuti Variables

def PSMC(p):
    return(np.log10(p))

### LMC DISTANCE MODULUS CALCULATIONS AND DATA PROCESSING ###

#Absolute Magnitude Calculation of LMC Delta Scuti Variables

def MLMC(I): 
    return(I - 5*np.log10(DistLMC/10))

#Log(10) of the Fundamental mode Period (fundamental mode brightness fluctuation) of LMC Delta Scuti Variables

def PLMC(p):
    return(np.log10(p))

### P-L RELATIONSHIP GENERATION (CALIBRATION CURVES TO CALCULATE DISTANCE) ###

#SMC P-L relation calibration curve generated from SMC Delta Scuti Variables

y = ((MSMC(dfCSMC['I'])).tolist())
x = ((PSMC(dfCSMC['P'])).tolist())

plt.scatter(x, y)
a, b = np.polyfit(x, y, 1)
plt.xlabel('Log10 of Period(day)')
plt.ylabel('Abs I-band Mag')
LOBF = [i * a + b for i in x]
plt.plot(x, LOBF, color = "red")
plt.text(-0.6, -1.0, 'y = ' + format(a.round(2)) + 'x ' + format(b.round(2)))
plt.title('SMC P-L relationship')
plt.ylim(-6,4)
plt.xlim(-1.6,-0.4)
plt.show()

#LMC P-L relation calibration curve generated from LMC Delta Scuti Variables

w = ((MLMC(dfCLMC['I'])).tolist())
q = ((PLMC(dfCLMC['P'])).tolist())

plt.scatter(q, w)
c, d = np.polyfit(q, w, 1)
plt.xlabel('Log10 of Period(day)')
plt.ylabel('Abs I-band Mag')
LOBF = [i * c + d for i in q]
plt.plot(q, LOBF, color = "red")
plt.text(-0.6, -1.0, 'y = ' + format(c.round(2)) + 'x ' + format(d.round(2)))
plt.title('LMC P-L relationship')
plt.ylim(-6,4)
plt.xlim(-1.6,-0.4)
plt.show()

### Calculation of Distances to the SMC and LMC ###
#using SMC delta scuti variable period data ---> calculate absolute Magnitudes of SMC delta scuti variables ---> plug apparent magnitude and calculated absolute magnitude of delta scuti variables into distance modulus ---> find median of calculated distances
#using LMC delta scuti variable period data ---> calculate absolute Magnitudes of LMC delta scuti variables ---> plug apparent magnitude and calculated absolute magnitude of delta scuti variables into distance modulus ---> find median of calculated distances

#LMC P-L calibration curve: Calculating distances to SMC

def LMCPL(I, P):
    var1 = ((np.float64(c) * np.float64(np.log10(P))) + np.float64(d))
    var2 = ((I) - var1) / 5
    var3 = 10 * 10 ** var2
    return var3

#SMC P-L calibration curve: Calculating distances to LMC

def SMCPL(I, P):
    var1 = ((np.float64(a) * np.float64(np.log10(P))) + np.float64(b))
    var2 = ((I) - var1) / 5
    var3 = 10 * 10 ** var2
    return var3

#Adding the distance calculation for each Delta Scuti Variable into their respective Dataframe

dfCSMC['dists'] = LMCPL(dfCSMC['I'], dfCSMC['P'])
dfCLMC['dists'] = SMCPL(dfCLMC['I'], dfCLMC['P'])

#Calculating Median Distance to the SMC and LMC respectively

medianSMCdist = statistics.median(dfCSMC['dists'])
medianLMCdist = statistics.median(dfCLMC['dists'])

### Results and %Error ###

def SMCperror(dist):
    print(dist)
    print(np.abs((dist - 62440) / 62440)*100)

def LMCperror(dist):
    print(dist)
    print(np.abs((dist - 49590) / 49590)*100)

print(len(dfISMC) - len(dfCSMC))
print(len(dfILMC) - len(dfCLMC))

SMCperror(medianSMCdist)
LMCperror(medianLMCdist)

print(np.quantile(dfCSMC['dists'], [0.1, 0.35, 0.5, 0.65, 0.9]))
print(np.quantile(dfCLMC['dists'], [0.1, 0.35, 0.5, 0.65, 0.9]))
